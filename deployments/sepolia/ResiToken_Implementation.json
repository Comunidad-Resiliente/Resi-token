{
  "address": "0xCF2DE3A2f83aFD33a904897BcC5fa01166b2fFe9",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AccessControlBadConfirmation",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "neededRole",
          "type": "bytes32"
        }
      ],
      "name": "AccessControlUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "name": "AlreadyBuilder",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BurnForbbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "EnforcedPause",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ExpectedPause",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "adr",
          "type": "address"
        }
      ],
      "name": "InvalidAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvalidAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "name": "InvalidBuilder",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "InvalidDecimals",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "userBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "serieSupplies",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "quote",
          "type": "uint256"
        }
      ],
      "name": "InvalidQuote",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "InvalidSerie",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "InvalidSerieVault",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "InvalidUserSerieBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        }
      ],
      "name": "InvalidVault",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReentrancyGuardReentrantCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "SerieWithNoMintedSupply",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "TransferForbidden",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "message",
          "type": "string"
        }
      ],
      "name": "TransferFromForbidden",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "BuilderAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "builder",
          "type": "address"
        }
      ],
      "name": "BuilderRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "Exit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "update",
          "type": "bool"
        }
      ],
      "name": "ExitStateUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "ResiTokenBurnt",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "treasury",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "decimals",
          "type": "uint8"
        }
      ],
      "name": "ResiTokenInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "newStatus",
          "type": "bool"
        }
      ],
      "name": "SerieVaultStatusUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldVault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "SerieVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "UserAwarded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ValueTokenWithdrawn",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BUILDER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EXIT_STATE",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TREASURY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "addBuilder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        }
      ],
      "name": "addBuildersBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "award",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "_amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "awardBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disableExits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableExits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_treasury",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_builders",
          "type": "address[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "isBuilder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_builder",
          "type": "address"
        }
      ],
      "name": "removeBuilder",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "callerConfirmation",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "serieSupplies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "supplyEmitted",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        }
      ],
      "name": "serieVaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "setSerieVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "updateSerieVaultStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "serieId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "userSerieBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_serieId",
          "type": "uint256"
        }
      ],
      "name": "withdrawSerieVaultToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x63df7b93b55ffe479c6779f09ac831075895ae644870832ff1f0828ee1951d2d",
  "receipt": {
    "to": null,
    "from": "0x153073310327caA6abB76F735d115E5c8bA1617B",
    "contractAddress": "0xCF2DE3A2f83aFD33a904897BcC5fa01166b2fFe9",
    "transactionIndex": 51,
    "gasUsed": "4217957",
    "logsBloom": "0x
    "blockHash": "0x63ede499d90774f347f9cd5f8e523695238c8c7ec14f804c05ce75172d24e84f",
    "transactionHash": "0x63df7b93b55ffe479c6779f09ac831075895ae644870832ff1f0828ee1951d2d",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 5692083,
        "transactionHash": "0x63df7b93b55ffe479c6779f09ac831075895ae644870832ff1f0828ee1951d2d",
        "address": "0xCF2DE3A2f83aFD33a904897BcC5fa01166b2fFe9",
        "topics": [
          "0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2"
        ],
        "data": "0x000000000000000000000000000000000000000000000000ffffffffffffffff",
        "logIndex": 53,
        "blockHash": "0x63ede499d90774f347f9cd5f8e523695238c8c7ec14f804c05ce75172d24e84f"
      }
    ],
    "blockNumber": 5692083,
    "cumulativeGasUsed": "14860334",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "759733d830da63268c5b093d290c3a41",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AccessControlBadConfirmation\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"neededRole\",\"type\":\"bytes32\"}],\"name\":\"AccessControlUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"name\":\"AlreadyBuilder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BurnForbbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"EnforcedPause\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ExpectedPause\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"adr\",\"type\":\"address\"}],\"name\":\"InvalidAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"name\":\"InvalidBuilder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"InvalidDecimals\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"userBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"serieSupplies\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"quote\",\"type\":\"uint256\"}],\"name\":\"InvalidQuote\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"InvalidSerie\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"InvalidSerieVault\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InvalidUserSerieBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"}],\"name\":\"InvalidVault\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReentrancyGuardReentrantCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"SerieWithNoMintedSupply\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TransferForbidden\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"message\",\"type\":\"string\"}],\"name\":\"TransferFromForbidden\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"BuilderAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"builder\",\"type\":\"address\"}],\"name\":\"BuilderRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"Exit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"update\",\"type\":\"bool\"}],\"name\":\"ExitStateUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"ResiTokenBurnt\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"treasury\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"decimals\",\"type\":\"uint8\"}],\"name\":\"ResiTokenInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"newStatus\",\"type\":\"bool\"}],\"name\":\"SerieVaultStatusUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldVault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"SerieVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"UserAwarded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ValueTokenWithdrawn\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BUILDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EXIT_STATE\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TREASURY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"addBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"}],\"name\":\"addBuildersBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"award\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"_amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"awardBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disableExits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableExits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_treasury\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_builders\",\"type\":\"address[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"isBuilder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_builder\",\"type\":\"address\"}],\"name\":\"removeBuilder\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"callerConfirmation\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"serieSupplies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supplyEmitted\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"}],\"name\":\"serieVaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"setSerieVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"updateSerieVaultStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"serieId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"userSerieBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_serieId\",\"type\":\"uint256\"}],\"name\":\"withdrawSerieVaultToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alejo Lovallo\",\"errors\":{\"AccessControlBadConfirmation()\":[{\"details\":\"The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\"}],\"AccessControlUnauthorizedAccount(address,bytes32)\":[{\"details\":\"The `account` is missing a role.\"}],\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"EnforcedPause()\":[{\"details\":\"The operation failed because the contract is paused.\"}],\"ExpectedPause()\":[{\"details\":\"The operation failed because the contract is not paused.\"}],\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"ReentrancyGuardReentrantCall()\":[{\"details\":\"Unauthorized reentrant call.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"RoleAdminChanged(bytes32,bytes32,bytes32)\":{\"details\":\"Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this.\"},\"RoleGranted(bytes32,address,address)\":{\"details\":\"Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}.\"},\"RoleRevoked(bytes32,address,address)\":{\"details\":\"Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"addBuilder(address)\":{\"details\":\"Add new builder.\",\"params\":{\"_builder\":\"address.\"}},\"addBuildersBatch(address[])\":{\"details\":\"Add builders batch.\",\"params\":{\"_builders\":\"array of builder addresses.\"}},\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"award(address,uint256,uint256)\":{\"details\":\"Mint builder Resi tokens.\",\"params\":{\"_amount\":\"amount to mint/award.\",\"_serieId\":\"serie id.\",\"_to\":\"builder address.\"}},\"awardBatch(address[],uint256[],uint256)\":{\"details\":\"Mint batch users\",\"params\":{\"_amounts\":\"array of amounts.\",\"_serieId\":\"serie id.\",\"_users\":\"array of users address (must be builders).\"}},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"See {ERC20Upgradeable}\"},\"burn(uint256,uint256)\":{\"details\":\"Burn Resi tokens.\",\"params\":{\"_serieId\":\"serie id.\",\"_value\":\"amount to burn.\"}},\"burnFrom(address,uint256)\":{\"details\":\"See {ERC20Upgradeable}\"},\"decimals()\":{\"details\":\"See {ERC20Upgradeable}\"},\"disableExits()\":{\"details\":\"Disable exits.\"},\"enableExits()\":{\"details\":\"Enable exits and thus users will be able to change their resi-tokens.\"},\"exit(uint256)\":{\"details\":\"Change Resi tokens for stable value token.\",\"params\":{\"_serieId\":\"serie id.\"}},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"initialize(uint8,address,address[])\":{\"details\":\"Initialize contract.\",\"params\":{\"_builders\":\"array of builder addresses.\",\"_decimals\":\"token decimals.\",\"_treasury\":\"treasury address.\"}},\"isBuilder(address)\":{\"params\":{\"_builder\":\"address.\"}},\"name()\":{\"details\":\"Returns the name of the token.\"},\"pause()\":{\"details\":\"Pause contract.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"removeBuilder(address)\":{\"details\":\"Remove builder user.\",\"params\":{\"_builder\":\"builder address.\"}},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event.\"},\"setSerieVault(address,uint256)\":{\"details\":\"Set serie vault\",\"params\":{\"_serieId\":\"serie id.\",\"_vault\":\"vault address.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"It is not allowed to transfer resi token\"},\"transferFrom(address,address,uint256)\":{\"details\":\"It is not allowed to transfer resi token\"},\"unpause()\":{\"details\":\"Unpause contract.\"},\"updateSerieVaultStatus(uint256,bool)\":{\"details\":\"enable or disable serie vault.\",\"params\":{\"_serieId\":\"serie id.\",\"_status\":\"new serie vault status.\"}},\"version()\":{\"details\":\"Version for upgradeable version\",\"returns\":{\"_0\":\"version\"}},\"withdrawSerieVaultToken(uint256)\":{\"details\":\"Withdrawn stable token funds from vault dust back to the treasury.\"}},\"stateVariables\":{\"BUILDER_ROLE\":{\"details\":\"BUILDER_ROLE\"},\"EXIT_STATE\":{\"details\":\"exit state: whether exits are enable or not\"},\"TREASURY\":{\"details\":\"treasury address\"},\"_DECIMALS\":{\"details\":\"token decimals.\"},\"serieSupplies\":{\"details\":\"Serie supply minted\"},\"serieVaults\":{\"details\":\"Vault serie id\"},\"upgradeGap\":{\"details\":\"Leave a gap betweeen inherited contracts variables in orderto be able to add more variables in them later.\"},\"userSerieBalance\":{\"details\":\"User balance per serie\"}},\"title\":\"Resi Token V1\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isBuilder(address)\":{\"notice\":\"#dev Returns whether an address is a builder.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ResiToken.sol\":\"ResiToken\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"@openzeppelin/contracts/access/IAccessControl.sol\\\";\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControlUpgradeable is Initializable, ContextUpgradeable, IAccessControl, ERC165Upgradeable {\\n    struct RoleData {\\n        mapping(address account => bool) hasRole;\\n        bytes32 adminRole;\\n    }\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControl\\n    struct AccessControlStorage {\\n        mapping(bytes32 role => RoleData) _roles;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControl\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlStorageLocation = 0x02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800;\\n\\n    function _getAccessControlStorage() private pure returns (AccessControlStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with an {AccessControlUnauthorizedAccount} error including the required role.\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    function __AccessControl_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControl_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].hasRole[account];\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `_msgSender()`\\n     * is missing `role`. Overriding this function changes the behavior of the {onlyRole} modifier.\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Reverts with an {AccessControlUnauthorizedAccount} error if `account`\\n     * is missing `role`.\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert AccessControlUnauthorizedAccount(account, role);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual returns (bytes32) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        return $._roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) public virtual {\\n        if (callerConfirmation != _msgSender()) {\\n            revert AccessControlBadConfirmation();\\n        }\\n\\n        _revokeRole(role, callerConfirmation);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        $._roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Attempts to grant `role` to `account` and returns a boolean indicating if `role` was granted.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (!hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Attempts to revoke `role` to `account` and returns a boolean indicating if `role` was revoked.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual returns (bool) {\\n        AccessControlStorage storage $ = _getAccessControlStorage();\\n        if (hasRole(role, account)) {\\n            $._roles[role].hasRole[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6662ec4e5cefca03eeadd073e9469df8d2944bb2ee8ec8f7622c2c46aab5f225\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/extensions/AccessControlEnumerableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControlEnumerable} from \\\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\\\";\\nimport {AccessControlUpgradeable} from \\\"../AccessControlUpgradeable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerableUpgradeable is Initializable, IAccessControlEnumerable, AccessControlUpgradeable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.AccessControlEnumerable\\n    struct AccessControlEnumerableStorage {\\n        mapping(bytes32 role => EnumerableSet.AddressSet) _roleMembers;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.AccessControlEnumerable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant AccessControlEnumerableStorageLocation = 0xc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000;\\n\\n    function _getAccessControlEnumerableStorage() private pure returns (AccessControlEnumerableStorage storage $) {\\n        assembly {\\n            $.slot := AccessControlEnumerableStorageLocation\\n        }\\n    }\\n\\n    function __AccessControlEnumerable_init() internal onlyInitializing {\\n    }\\n\\n    function __AccessControlEnumerable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual returns (address) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        return $._roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual returns (uint256) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        return $._roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        bool granted = super._grantRole(role, account);\\n        if (granted) {\\n            $._roleMembers[role].add(account);\\n        }\\n        return granted;\\n    }\\n\\n    /**\\n     * @dev Overload {AccessControl-_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override returns (bool) {\\n        AccessControlEnumerableStorage storage $ = _getAccessControlEnumerableStorage();\\n        bool revoked = super._revokeRole(role, account);\\n        if (revoked) {\\n            $._roleMembers[role].remove(account);\\n        }\\n        return revoked;\\n    }\\n}\\n\",\"keccak256\":\"0xc603154d2a4d8f88d4d3c11090a8224f572c4b1f8baced3ea46cdec49f4674ee\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20BurnableUpgradeable is Initializable, ContextUpgradeable, ERC20Upgradeable {\\n    function __ERC20Burnable_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Burnable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0xe74dd150d031e8ecf9755893a2aae02dec954158140424f11c28ff689a48492f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {PausableUpgradeable} from \\\"../../../utils/PausableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev ERC20 token with pausable token transfers, minting and burning.\\n *\\n * Useful for scenarios such as preventing trades until the end of an evaluation\\n * period, or having an emergency switch for freezing all token transfers in the\\n * event of a large bug.\\n *\\n * IMPORTANT: This contract does not include public pause and unpause functions. In\\n * addition to inheriting this contract, you must define both functions, invoking the\\n * {Pausable-_pause} and {Pausable-_unpause} internal functions, with appropriate\\n * access control, e.g. using {AccessControl} or {Ownable}. Not doing so will\\n * make the contract pause mechanism of the contract unreachable, and thus unusable.\\n */\\nabstract contract ERC20PausableUpgradeable is Initializable, ERC20Upgradeable, PausableUpgradeable {\\n    function __ERC20Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __ERC20Pausable_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {ERC20-_update}.\\n     *\\n     * Requirements:\\n     *\\n     * - the contract must not be paused.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override whenNotPaused {\\n        super._update(from, to, value);\\n    }\\n}\\n\",\"keccak256\":\"0xf31761e4cd0b20c33a04e8cfa21d3b40f0a18dd26f66f97686f87668ab5ba8f3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Pausable\\n    struct PausableStorage {\\n        bool _paused;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Pausable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant PausableStorageLocation = 0xcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300;\\n\\n    function _getPausableStorage() private pure returns (PausableStorage storage $) {\\n        assembly {\\n            $.slot := PausableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    /**\\n     * @dev The operation failed because the contract is paused.\\n     */\\n    error EnforcedPause();\\n\\n    /**\\n     * @dev The operation failed because the contract is not paused.\\n     */\\n    error ExpectedPause();\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        PausableStorage storage $ = _getPausableStorage();\\n        return $._paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        if (paused()) {\\n            revert EnforcedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        if (!paused()) {\\n            revert ExpectedPause();\\n        }\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        PausableStorage storage $ = _getPausableStorage();\\n        $._paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x92915b7f7f642c6be3f65bfd1522feb5d5b6ef25f755f4dbb51df32c868f2f97\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev The `account` is missing a role.\\n     */\\n    error AccessControlUnauthorizedAccount(address account, bytes32 neededRole);\\n\\n    /**\\n     * @dev The caller of a function is not the expected one.\\n     *\\n     * NOTE: Don't confuse with {AccessControlUnauthorizedAccount}.\\n     */\\n    error AccessControlBadConfirmation();\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `callerConfirmation`.\\n     */\\n    function renounceRole(bytes32 role, address callerConfirmation) external;\\n}\\n\",\"keccak256\":\"0xb6b36edd6a2999fd243ff226d6cbf84bd71af2432bbd0dfe19392996a1d9cb41\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/extensions/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/extensions/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IAccessControl} from \\\"../IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xc1435f102633849858e75d7bed14c636f25448ceb3406d82992b0f2df52f4306\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"contracts/ResiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IResiToken} from \\\"./interfaces/IResiToken.sol\\\";\\nimport {IResiVault} from \\\"./interfaces/IResiVault.sol\\\";\\nimport {ResiVault} from \\\"./ResiVault.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {ERC20Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\nimport {ERC20BurnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol\\\";\\nimport {ERC20PausableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PausableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/extensions/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Resi Token V1\\n * @author Alejo Lovallo\\n */\\ncontract ResiToken is\\n    IResiToken,\\n    ERC20BurnableUpgradeable,\\n    ERC20PausableUpgradeable,\\n    AccessControlEnumerableUpgradeable,\\n    ReentrancyGuardUpgradeable\\n{\\n    /// @dev BUILDER_ROLE\\n    bytes32 public constant BUILDER_ROLE = keccak256(\\\"BUILDER_ROLE\\\");\\n\\n    /// @dev SafeERC20 library (change contract calls)\\n    using SafeERC20 for IERC20;\\n\\n    /// @dev Enumerable role set\\n    using EnumerableSet for EnumerableSet.Bytes32Set;\\n    EnumerableSet.Bytes32Set private _rolesSet;\\n\\n    /// @dev token decimals.\\n    uint8 private _DECIMALS;\\n\\n    /// @dev treasury address\\n    address public TREASURY;\\n\\n    /// @dev exit state: whether exits are enable or not\\n    bool public EXIT_STATE;\\n\\n    /// @dev Serie supply minted\\n    mapping(uint256 serieId => uint256 supplyEmitted) public serieSupplies;\\n    /// @dev User balance per serie\\n    mapping(uint256 serieId => mapping(address user => uint256 balance)) public userSerieBalance;\\n    /// @dev Vault serie id\\n    mapping(uint256 serieId => SerieVault vault) public serieVaults;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initialize contract.\\n     * @param _decimals token decimals.\\n     * @param _treasury treasury address.\\n     * @param _builders array of builder addresses.\\n     */\\n    function initialize(uint8 _decimals, address _treasury, address[] calldata _builders) public initializer {\\n        if (_treasury == address(0)) revert InvalidAddress(_treasury);\\n        if (_decimals == 0) revert InvalidDecimals(_decimals);\\n\\n        __ERC20_init_unchained(\\\"RESI-TOKEN\\\", \\\"RESI\\\");\\n        __ReentrancyGuard_init_unchained();\\n        __ERC20Burnable_init_unchained();\\n        __ERC20Pausable_init_unchained();\\n\\n        _rolesSet.add(BUILDER_ROLE);\\n\\n        _DECIMALS = _decimals;\\n\\n        TREASURY = _treasury;\\n\\n        _grantRole(DEFAULT_ADMIN_ROLE, TREASURY);\\n        _setRoleAdmin(BUILDER_ROLE, DEFAULT_ADMIN_ROLE);\\n\\n        for (uint256 i; i < _builders.length; i++) {\\n            _addBuilder(_builders[i]);\\n        }\\n\\n        emit ResiTokenInitialized(_treasury, _decimals);\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n\\n    ///@dev Version for upgradeable version\\n    ///@return version\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    /**\\n     * @dev See {ERC20Upgradeable}\\n     */\\n    function decimals() public view override(ERC20Upgradeable, IResiToken) returns (uint8) {\\n        return _DECIMALS;\\n    }\\n\\n    /**\\n     * #dev Returns whether an address is a builder.\\n     * @param _builder address.\\n     */\\n    function isBuilder(address _builder) public view returns (bool) {\\n        return hasRole(BUILDER_ROLE, _builder);\\n    }\\n\\n    /**************************** SETTERS  ****************************/\\n\\n    /**\\n     * @dev Pause contract.\\n     */\\n    function pause() external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        _pause();\\n    }\\n\\n    /**\\n     * @dev Unpause contract.\\n     */\\n    function unpause() external onlyRole(DEFAULT_ADMIN_ROLE) whenPaused {\\n        _unpause();\\n    }\\n\\n    /**\\n     * @dev Enable exits and thus users will be able to change their resi-tokens.\\n     */\\n    function enableExits() external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        EXIT_STATE = true;\\n        emit ExitStateUpdated(true);\\n    }\\n\\n    /**\\n     * @dev Disable exits.\\n     */\\n    function disableExits() external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        EXIT_STATE = false;\\n        emit ExitStateUpdated(false);\\n    }\\n\\n    /**\\n     * @dev Set serie vault\\n     * @param _vault vault address.\\n     * @param _serieId serie id.\\n     */\\n    function setSerieVault(address _vault, uint256 _serieId) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        if (_vault == address(0)) revert InvalidVault(_vault);\\n        if (_serieId == 0) revert InvalidSerie(_serieId);\\n        address oldVault = serieVaults[_serieId].vault;\\n        serieVaults[_serieId].vault = _vault;\\n        serieVaults[_serieId].active = true;\\n        emit SerieVaultUpdated(_serieId, oldVault, _vault);\\n    }\\n\\n    /**\\n     * @dev enable or disable serie vault.\\n     * @param _serieId serie id.\\n     * @param _status new serie vault status.\\n     */\\n    function updateSerieVaultStatus(\\n        uint256 _serieId,\\n        bool _status\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        if (_serieId == 0) revert InvalidSerie(_serieId);\\n        serieVaults[_serieId].active = _status;\\n        emit SerieVaultStatusUpdated(_serieId, _status);\\n    }\\n\\n    /**\\n     * @dev Add new builder.\\n     * @param _builder address.\\n     */\\n    function addBuilder(address _builder) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        _addBuilder(_builder);\\n    }\\n\\n    /**\\n     * @dev Remove builder user.\\n     * @param _builder builder address.\\n     */\\n    function removeBuilder(address _builder) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        if (_builder == address(0)) {\\n            revert InvalidAddress(_builder);\\n        }\\n        if (!hasRole(BUILDER_ROLE, _builder)) {\\n            revert InvalidBuilder(_builder);\\n        }\\n        _revokeRole(BUILDER_ROLE, _builder);\\n\\n        emit BuilderRemoved(_builder);\\n    }\\n\\n    /**\\n     * @dev Add builders batch.\\n     * @param _builders array of builder addresses.\\n     */\\n    function addBuildersBatch(address[] memory _builders) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        for (uint256 i = 0; i < _builders.length; ++i) {\\n            _addBuilder(_builders[i]);\\n        }\\n    }\\n\\n    /**\\n     * @dev Mint builder Resi tokens.\\n     * @param _to builder address.\\n     * @param _amount amount to mint/award.\\n     * @param _serieId serie id.\\n     */\\n    function award(address _to, uint256 _amount, uint256 _serieId) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        _award(_to, _amount, _serieId);\\n    }\\n\\n    /**\\n     * @dev Mint batch users\\n     * @param _users array of users address (must be builders).\\n     * @param _amounts array of amounts.\\n     * @param _serieId serie id.\\n     */\\n    function awardBatch(\\n        address[] memory _users,\\n        uint256[] memory _amounts,\\n        uint256 _serieId\\n    ) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        require(_users.length == _amounts.length, \\\"RESIToken: users and amounts length mismatch\\\");\\n        for (uint256 i = 0; i < _users.length; i++) {\\n            _award(_users[i], _amounts[i], _serieId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Burn Resi tokens.\\n     * @param _value amount to burn.\\n     * @param _serieId serie id.\\n     */\\n    function burn(uint256 _value, uint256 _serieId) external onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        if (_serieId == 0) revert InvalidSerie(_serieId);\\n        _burn(address(this), _value);\\n        serieSupplies[_serieId] -= _value;\\n        emit ResiTokenBurnt(_value, _serieId);\\n    }\\n\\n    /**\\n     * @dev Change Resi tokens for stable value token.\\n     * @param _serieId serie id.\\n     */\\n    function exit(uint256 _serieId) external whenExitIsEnabled nonReentrant {\\n        _checkExit(_serieId);\\n\\n        uint256 userBalance = userSerieBalance[_serieId][_msgSender()];\\n        uint256 quote = IResiVault(serieVaults[_serieId].vault).getExitQuote(userBalance, serieSupplies[_serieId]);\\n\\n        if (quote > 0) {\\n            _transfer(_msgSender(), address(this), userBalance);\\n            IResiVault(serieVaults[_serieId].vault).release(_msgSender(), userBalance, serieSupplies[_serieId]);\\n            userSerieBalance[_serieId][_msgSender()] = 0;\\n            emit Exit(_msgSender(), quote, _serieId);\\n        } else {\\n            revert InvalidQuote(userBalance, serieSupplies[_serieId], quote);\\n        }\\n    }\\n\\n    /**\\n     * @dev Withdrawn stable token funds from vault dust back to the treasury.\\n     */\\n    function withdrawSerieVaultToken(uint256 _serieId) external onlyRole(DEFAULT_ADMIN_ROLE) whenPaused {\\n        if (serieVaults[_serieId].vault == address(0) || !serieVaults[_serieId].active)\\n            revert InvalidSerieVault(_serieId, serieVaults[_serieId].vault);\\n\\n        uint256 amountWithdrawn = IResiVault(serieVaults[_serieId].vault).withdrawToTreasury(TREASURY);\\n\\n        emit ValueTokenWithdrawn(_serieId, amountWithdrawn);\\n    }\\n\\n    /**\\n     *  @dev It is not allowed to transfer resi token\\n     */\\n    function transfer(address, uint256) public pure override(ERC20Upgradeable) returns (bool) {\\n        revert TransferForbidden(\\\"RESIToken: NO TRANSFER ALLOWED\\\");\\n    }\\n\\n    /**\\n     *\\u00a0@dev It is not allowed to transfer resi token\\n     */\\n    function transferFrom(address, address, uint256) public pure override(ERC20Upgradeable) returns (bool) {\\n        revert TransferFromForbidden(\\\"RESIToken: NO TRANSFER FROM ALLOWED\\\");\\n    }\\n\\n    /**\\n     * @dev See {ERC20Upgradeable}\\n     */\\n    function burn(uint256) public pure override(ERC20BurnableUpgradeable) {\\n        revert BurnForbbidden();\\n    }\\n\\n    /**\\n     * @dev See {ERC20Upgradeable}\\n     */\\n    function burnFrom(address, uint256) public pure override(ERC20BurnableUpgradeable) {\\n        revert BurnForbbidden();\\n    }\\n\\n    /**************************** INTERNAL  ****************************/\\n\\n    /**\\n     * #dev internal function to add builder.\\n     * @param _builder address of the builder.\\n     */\\n    function _addBuilder(address _builder) internal onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        if (_builder == address(0)) revert InvalidAddress(_builder);\\n        if (hasRole(BUILDER_ROLE, _builder)) {\\n            revert AlreadyBuilder(_builder);\\n        }\\n        _grantRole(BUILDER_ROLE, _builder);\\n        emit BuilderAdded(_builder);\\n    }\\n\\n    /**\\n     * @dev Internal function for award function.\\n     * @param _user builder address.\\n     * @param _amount amount to award.\\n     * @param _serieId serie id.\\n     */\\n    function _award(\\n        address _user,\\n        uint256 _amount,\\n        uint256 _serieId\\n    ) internal onlyRole(DEFAULT_ADMIN_ROLE) whenNotPaused {\\n        if (_serieId == 0) revert InvalidSerie(_serieId);\\n        if (_user == address(0)) revert InvalidAddress(_user);\\n        if (_amount == 0) revert InvalidAmount(_amount);\\n        if (!hasRole(BUILDER_ROLE, _user)) revert InvalidBuilder(_user);\\n        _mint(_user, _amount);\\n        serieSupplies[_serieId] += _amount;\\n        userSerieBalance[_serieId][_user] += _amount;\\n        emit UserAwarded(_user, _amount, _serieId);\\n    }\\n\\n    /**\\n     * @dev Internal function to perform valid exit\\n     */\\n    function _checkExit(uint256 _serieId) internal view {\\n        if (_msgSender() == TREASURY) revert InvalidAddress(_msgSender());\\n        if (!hasRole(BUILDER_ROLE, _msgSender())) revert InvalidBuilder(_msgSender());\\n        if (serieVaults[_serieId].vault == address(0) || !serieVaults[_serieId].active)\\n            revert InvalidSerieVault(_serieId, serieVaults[_serieId].vault);\\n        if (serieSupplies[_serieId] == 0) revert SerieWithNoMintedSupply(_serieId);\\n        if (userSerieBalance[_serieId][_msgSender()] == 0)\\n            revert InvalidUserSerieBalance(userSerieBalance[_serieId][_msgSender()]);\\n    }\\n\\n    /**\\n     * @dev See {ERC20Upgradeable}\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal virtual override(ERC20PausableUpgradeable, ERC20Upgradeable) whenNotPaused {\\n        ERC20PausableUpgradeable._update(from, to, value);\\n    }\\n\\n    /**************************** MODIFIERS  ****************************/\\n\\n    /**\\n     * @dev modifier to check exit state.\\n     */\\n    modifier whenExitIsEnabled() {\\n        require(!paused() && EXIT_STATE, \\\"RESIToken: Exits disabled\\\");\\n        _;\\n    }\\n\\n    /// @dev Leave a gap betweeen inherited contracts variables in order\\n    /// @dev to be able to add more variables in them later.\\n    uint256[20] private upgradeGap;\\n}\\n\",\"keccak256\":\"0x80a399228ed726d59c10123da1185de5573085ed12d8af8d8a146c683ab50f22\",\"license\":\"MIT\"},\"contracts/ResiVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IResiVault} from \\\"./interfaces/IResiVault.sol\\\";\\n\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {ReentrancyGuardUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\nimport {AccessControlEnumerableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/extensions/AccessControlEnumerableUpgradeable.sol\\\";\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @title Resi Vault V1\\n * @dev Vault meant to save serie funds.\\n * @author Alejo Lovallo\\n */\\ncontract ResiVault is IResiVault, OwnableUpgradeable, ReentrancyGuardUpgradeable {\\n    ///@dev SERIE ID linked to Vault\\n    uint256 public SERIE_ID;\\n\\n    /// @dev stable token to make exits\\n    address public STABLE_TOKEN;\\n\\n    ///@dev Resi token contract\\n    address public RESI_TOKEN;\\n\\n    using SafeERC20 for IERC20;\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n\\n    /**\\n     * @dev Initialize contract.\\n     * @param _treasury treasury address.\\n     * @param _resiToken It\\u00b4s the ResiToken contract.\\n     * @param _stableToken Stable token for exits.\\n     * @param _serieId Serie which this vault belongs.\\n     */\\n    function initialize(\\n        address _treasury,\\n        address _resiToken,\\n        address _stableToken,\\n        uint256 _serieId\\n    ) public initializer {\\n        if (_treasury == address(0)) revert InvalidAddress(_treasury);\\n        if (_resiToken == address(0)) revert InvalidAddress(_resiToken);\\n        if (_stableToken == address(0)) revert InvalidAddress(_stableToken);\\n        if (_serieId == 0) revert InvalidSerie(_serieId);\\n\\n        __Context_init_unchained();\\n        __Ownable_init_unchained(_treasury);\\n        __ReentrancyGuard_init_unchained();\\n\\n        RESI_TOKEN = _resiToken;\\n        STABLE_TOKEN = _stableToken;\\n        SERIE_ID = _serieId;\\n\\n        emit ResiVaultInitialized(_resiToken, _stableToken, _serieId);\\n    }\\n\\n    /**************************** GETTERS  ****************************/\\n\\n    ///@dev Version for upgradeable version\\n    ///@return version\\n    function version() external pure returns (string memory) {\\n        return \\\"1.0.0\\\";\\n    }\\n\\n    /**\\n     * @dev Get exit quote from resi tokens to stable token.\\n     * @param _userResiTokens builder resi tokens balance.\\n     * @param _serieSupply Resi tokens minted during the serie.\\n     */\\n    function getExitQuote(uint256 _userResiTokens, uint256 _serieSupply) public view returns (uint256 quote) {\\n        if (_serieSupply == 0) return 0;\\n        return (_userResiTokens * IERC20(STABLE_TOKEN).balanceOf(address(this))) / _serieSupply;\\n    }\\n\\n    /**\\n     * @dev Return vault stable token balance.\\n     */\\n    function getStableTokenBalance() external view returns (uint256 balance) {\\n        return IERC20(STABLE_TOKEN).balanceOf(address(this));\\n    }\\n\\n    /**************************** SETTERS  ****************************/\\n\\n    /**\\n     * @dev Set new value token to exchange against resi-tokens.\\n     * @param _newToken address of the new token.\\n     */\\n    function setValueToken(address _newToken) external onlyOwner {\\n        if (_newToken == address(0)) revert InvalidAddress(_newToken);\\n        address oldToken = STABLE_TOKEN;\\n        STABLE_TOKEN = _newToken;\\n        emit ValueTokenUpdated(oldToken, _newToken);\\n    }\\n\\n    /**************************** INTERFACE  ****************************/\\n\\n    /**\\n     * @dev Release stable tokens to builders.\\n     * @param _builder builder address.\\n     * @param _userResiTokens user resi tokens.\\n     * @param _serieSupply current serie supply.\\n     */\\n    function release(\\n        address _builder,\\n        uint256 _userResiTokens,\\n        uint256 _serieSupply\\n    ) external onlyResiToken nonReentrant {\\n        if (_builder == address(0)) revert InvalidAddress(_builder);\\n        if (_userResiTokens == 0) revert InvalidResiTokensAmount(_userResiTokens);\\n        if (_serieSupply == 0) revert InvalidResiSerieSupply(_serieSupply);\\n\\n        uint256 quote = getExitQuote(_userResiTokens, _serieSupply);\\n        if (IERC20(STABLE_TOKEN).balanceOf(address(this)) <= quote) revert InvalidQuote(quote);\\n\\n        IERC20(STABLE_TOKEN).safeTransfer(_builder, quote);\\n\\n        emit TokenReleased(_builder, quote);\\n    }\\n\\n    /**\\n     * @dev Send remaining dust funds back to treasury.\\n     * @param _treasury treasury address.\\n     */\\n    function withdrawToTreasury(address _treasury) external onlyResiToken returns (uint256 amountWithdrawn) {\\n        if (_treasury != owner()) revert InvalidAddress(_treasury);\\n\\n        uint256 stableTokenBalance = IERC20(STABLE_TOKEN).balanceOf(address(this));\\n        if (stableTokenBalance > 0) {\\n            IERC20(STABLE_TOKEN).safeTransfer(_treasury, stableTokenBalance);\\n            emit WithdrawnToTreasury(stableTokenBalance);\\n            return stableTokenBalance;\\n        } else {\\n            revert UnsufficientStableTokensToWithdrawn(stableTokenBalance);\\n        }\\n    }\\n\\n    /**************************** MODIFIERS  ****************************/\\n\\n    modifier onlyResiToken() {\\n        require(_msgSender() == RESI_TOKEN, \\\"RESIVault: ONLY RESI TOKEN\\\");\\n        _;\\n    }\\n\\n    /// @dev Leave a gap betweeen inherited contracts variables in order\\n    /// @dev to be able to add more variables in them later.\\n    uint256[20] private upgradeGap;\\n}\\n\",\"keccak256\":\"0x0cc9084d9ce217cba637948bc160f8197829d70ca97e56a2a11e7eb3bbff86d2\",\"license\":\"MIT\"},\"contracts/interfaces/IResiToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IResiToken {\\n    struct SerieVault {\\n        address vault;\\n        bool active;\\n    }\\n\\n    function decimals() external view returns (uint8);\\n\\n    function exit(uint256 _serieId) external;\\n\\n    event ResiTokenInitialized(address treasury, uint8 decimals);\\n    event BuilderAdded(address newMinter);\\n    event BuilderRemoved(address builder);\\n    event ResiTokenBurnt(uint256 value, uint256 serieId);\\n    event UserAwarded(address user, uint256 amount, uint256 serieId);\\n    event Exit(address indexed user, uint256 amount, uint256 serieId);\\n    event ExitStateUpdated(bool update);\\n    event ValueTokenWithdrawn(uint256 serieId, uint256 amount);\\n    event SerieVaultStatusUpdated(uint256 serieId, bool newStatus);\\n    event SerieVaultUpdated(uint256 serieId, address oldVault, address newVault);\\n\\n    error InvalidAddress(address adr);\\n    error InvalidAmount(uint256 amount);\\n    error InvalidSerie(uint256 serieId);\\n    error InvalidBuilder(address builder);\\n    error InvalidDecimals(uint8 decimals);\\n    error AlreadyBuilder(address builder);\\n    error TransferForbidden(string message);\\n    error TransferFromForbidden(string message);\\n    error InvalidQuote(uint256 userBalance, uint256 serieSupplies, uint256 quote);\\n    error SerieWithNoMintedSupply(uint256 serieId);\\n    error InvalidUserSerieBalance(uint256 amount);\\n    error BurnForbbidden();\\n    error InvalidVault(address vault);\\n    error InvalidSerieVault(uint256 serieId, address vault);\\n}\\n\",\"keccak256\":\"0x9022ae52cb4e8f7107abdacda98aec211593462dfe5c832ff56f5d1a1c685925\",\"license\":\"MIT\"},\"contracts/interfaces/IResiVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IResiVault {\\n    function getExitQuote(uint256 _userResiTokens, uint256 _serieSupply) external view returns (uint256 quote);\\n\\n    function getStableTokenBalance() external view returns (uint256 balance);\\n\\n    function release(address _builder, uint256 _userResiTokens, uint256 _serieSupply) external;\\n\\n    function withdrawToTreasury(address _treasury) external returns (uint256 amountWithdrawn);\\n\\n    event ResiVaultInitialized(address resiToken, address stableToken, uint256 serieId);\\n    event ValueTokenUpdated(address oldToken, address newToken);\\n    event TokenReleased(address indexed builder, uint256 amount);\\n    event WithdrawnToTreasury(uint256 amount);\\n\\n    error InvalidAddress(address adr);\\n    error InvalidQuote(uint256 amount);\\n    error InvalidSerie(uint256 serieId);\\n    error InvalidResiTokensAmount(uint256 amount);\\n    error InvalidResiSerieSupply(uint256 supply);\\n    error UnsufficientStableTokensToWithdrawn(uint256 amount);\\n}\\n\",\"keccak256\":\"0xb93ee77a8b82ea3d2235c216c1e7fde602d2ab10348885bde3475ef788fa0576\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50620000226200002860201b60201c565b6200019c565b60006200003a6200013260201b60201c565b90508060000160089054906101000a900460ff161562000086576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b67ffffffffffffffff80168160000160009054906101000a900467ffffffffffffffff1667ffffffffffffffff16146200012f5767ffffffffffffffff8160000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d267ffffffffffffffff6040516200012691906200017f565b60405180910390a15b50565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600067ffffffffffffffff82169050919050565b62000179816200015a565b82525050565b60006020820190506200019660008301846200016e565b92915050565b614b2580620001ac6000396000f3fe608060405234801561001057600080fd5b50600436106102745760003560e01c80638a01860d11610151578063b9a53442116100c3578063dd44137511610087578063dd44137514610749578063dd62ed3e14610765578063e8365c2114610795578063ec969386146107c6578063f629c184146107e2578063fff12f77146107fe57610274565b8063b9a53442146106a7578063ca15c873146106c3578063cd0d51c8146106f3578063ce3d78d61461070f578063d547741f1461072d57610274565b8063a217fddf11610115578063a217fddf146105e5578063a62d8f0914610603578063a9059cbb1461060d578063aafadb011461063d578063b390c0ab1461065b578063b6b6b4751461067757610274565b80638a01860d1461052d5780639010d07c1461055d57806391d148541461058d578063927814fc146105bd57806395d89b41146105c757610274565b806336432b4c116101ea57806354fd4d50116101ae57806354fd4d501461047f5780635c975abb1461049d57806370a08231146104bb57806379cc6790146104eb5780637f8661a1146105075780638456cb591461052357610274565b806336432b4c1461040557806336568abe146104215780633ca74dca1461043d5780633f4ba83a1461045957806342966c681461046357610274565b806323b872dd1161023c57806323b872dd14610331578063248a9ca31461036157806325f5ffa4146103915780632d2c5565146103ad5780632f2ff15d146103cb578063313ce567146103e757610274565b806301ffc9a71461027957806306fdde03146102a9578063095ea7b3146102c757806309f6bc23146102f757806318160ddd14610313575b600080fd5b610293600480360381019061028e919061390a565b61082e565b6040516102a09190613952565b60405180910390f35b6102b16108a8565b6040516102be91906139fd565b60405180910390f35b6102e160048036038101906102dc9190613ab3565b610949565b6040516102ee9190613952565b60405180910390f35b610311600480360381019061030c9190613ab3565b61096c565b005b61031b610b37565b6040516103289190613b02565b60405180910390f35b61034b60048036038101906103469190613b1d565b610b4f565b6040516103589190613952565b60405180910390f35b61037b60048036038101906103769190613ba6565b610b8c565b6040516103889190613be2565b60405180910390f35b6103ab60048036038101906103a69190613bfd565b610bba565b005b6103b5610bdc565b6040516103c29190613c39565b60405180910390f35b6103e560048036038101906103e09190613c54565b610c02565b005b6103ef610c24565b6040516103fc9190613cb0565b60405180910390f35b61041f600480360381019061041a9190613d5c565b610c3b565b005b61043b60048036038101906104369190613c54565b611082565b005b61045760048036038101906104529190613dfc565b6110fd565b005b6104616111c3565b005b61047d60048036038101906104789190613e3c565b6111e3565b005b610487611215565b60405161049491906139fd565b60405180910390f35b6104a5611252565b6040516104b29190613952565b60405180910390f35b6104d560048036038101906104d09190613bfd565b611277565b6040516104e29190613b02565b60405180910390f35b61050560048036038101906105009190613ab3565b6112ce565b005b610521600480360381019061051c9190613e3c565b611300565b005b61052b61168a565b005b61054760048036038101906105429190613e3c565b6116aa565b6040516105549190613b02565b60405180910390f35b61057760048036038101906105729190613e69565b6116c2565b6040516105849190613c39565b60405180910390f35b6105a760048036038101906105a29190613c54565b6116ff565b6040516105b49190613952565b60405180910390f35b6105c5611778565b005b6105cf6117e3565b6040516105dc91906139fd565b60405180910390f35b6105ed611884565b6040516105fa9190613be2565b60405180910390f35b61060b61188b565b005b61062760048036038101906106229190613ab3565b6118f6565b6040516106349190613952565b60405180910390f35b610645611933565b6040516106529190613952565b60405180910390f35b61067560048036038101906106709190613ea9565b611946565b005b610691600480360381019061068c9190613bfd565b611a12565b60405161069e9190613952565b60405180910390f35b6106c160048036038101906106bc9190613e3c565b611a45565b005b6106dd60048036038101906106d89190613ba6565b611c7c565b6040516106ea9190613b02565b60405180910390f35b61070d600480360381019061070891906140ea565b611cae565b005b610717611d6c565b6040516107249190613be2565b60405180910390f35b61074760048036038101906107429190613c54565b611d90565b005b610763600480360381019061075e9190614175565b611db2565b005b61077f600480360381019061077a91906141c8565b611dd8565b60405161078c9190613b02565b60405180910390f35b6107af60048036038101906107aa9190613e3c565b611e6d565b6040516107bd929190614208565b60405180910390f35b6107e060048036038101906107db9190613bfd565b611ebe565b005b6107fc60048036038101906107f79190614231565b612015565b005b6108186004803603810190610813919061427a565b61206f565b6040516108259190613b02565b60405180910390f35b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108a157506108a082612094565b5b9050919050565b606060006108b461210e565b90508060030180546108c5906142e9565b80601f01602080910402602001604051908101604052809291908181526020018280546108f1906142e9565b801561093e5780601f106109135761010080835404028352916020019161093e565b820191906000526020600020905b81548152906001019060200180831161092157829003601f168201915b505050505091505090565b600080610954612136565b905061096181858561213e565b600191505092915050565b6000801b61097981612150565b610981612164565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109f257826040517faf7301ae0000000000000000000000000000000000000000000000000000000081526004016109e99190613c39565b60405180910390fd5b60008203610a3757816040517f8374bf35000000000000000000000000000000000000000000000000000000008152600401610a2e9190613b02565b60405180910390fd5b60006005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050836005600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060000160146101000a81548160ff0219169083151502179055507f2a22b8081e985f611f3d994c0daf30de3f593e1b7bd89e55540fbfd014a503d5838286604051610b299392919061431a565b60405180910390a150505050565b600080610b4261210e565b9050806002015491505090565b60006040517fb77a6239000000000000000000000000000000000000000000000000000000008152600401610b83906143c3565b60405180910390fd5b600080610b976121a5565b905080600001600084815260200190815260200160002060010154915050919050565b6000801b610bc781612150565b610bcf612164565b610bd8826121cd565b5050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c0b82610b8c565b610c1481612150565b610c1e8383612325565b50505050565b6000600260009054906101000a900460ff16905090565b6000610c4561237a565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610c935750825b9050600060018367ffffffffffffffff16148015610cc8575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610cd6575080155b15610d0d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610d5d5760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603610dce57876040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401610dc59190613c39565b60405180910390fd5b60008960ff1603610e1657886040517fca950391000000000000000000000000000000000000000000000000000000008152600401610e0d9190613cb0565b60405180910390fd5b610e8a6040518060400160405280600a81526020017f524553492d544f4b454e000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f52455349000000000000000000000000000000000000000000000000000000008152506123a2565b610e926123df565b610e9a612400565b610ea261240a565b610ed67f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb600061241490919063ffffffff16565b5088600260006101000a81548160ff021916908360ff16021790555087600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f626000801b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612325565b50610f907f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb6000801b61242b565b60005b87879050811015610fe157610fce888883818110610fb457610fb36143e3565b5b9050602002016020810190610fc99190613bfd565b6121cd565b8080610fd990614441565b915050610f93565b507fd15abd6de84703abf7bac7ca89b7e370f1039b4d328a0f9b57306b484c1b19bb888a604051611013929190614489565b60405180910390a183156110775760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161106e919061450b565b60405180910390a15b505050505050505050565b61108a612136565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110ee576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110f88282612496565b505050565b6000801b61110a81612150565b611112612164565b6000830361115757826040517f8374bf3500000000000000000000000000000000000000000000000000000000815260040161114e9190613b02565b60405180910390fd5b816005600085815260200190815260200160002060000160146101000a81548160ff0219169083151502179055507f3995ebfca9daa9de928a16322fcdc0be8809444e355b33b0d395338bc48d4c4783836040516111b6929190614526565b60405180910390a1505050565b6000801b6111d081612150565b6111d86124eb565b6111e061252b565b50565b6040517f28b6a5f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b60008061125d61259d565b90508060000160009054906101000a900460ff1691505090565b60008061128261210e565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b6040517f28b6a5f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611308611252565b1580156113215750600260159054906101000a900460ff165b611360576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113579061459b565b60405180910390fd5b6113686125c5565b6113718161261c565b6000600460008381526020019081526020016000206000611390612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af024b108360036000878152602001908152602001600020546040518363ffffffff1660e01b81526004016114539291906145bb565b602060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149491906145f9565b90506000811115611629576114b16114aa612136565b308461298f565b6005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f297be6661150b612136565b8460036000888152602001908152602001600020546040518463ffffffff1660e01b815260040161153e93929190614626565b600060405180830381600087803b15801561155857600080fd5b505af115801561156c573d6000803e3d6000fd5b50505050600060046000858152602001908152602001600020600061158f612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d5612136565b73ffffffffffffffffffffffffffffffffffffffff167fbe0b6e5b3195df91f2e6b2b20501f84b085714f9e38073f499073c8305651009828560405161161c9291906145bb565b60405180910390a261167d565b816003600085815260200190815260200160002054826040517f8fcefc700000000000000000000000000000000000000000000000000000000081526004016116749392919061465d565b60405180910390fd5b5050611687612a83565b50565b6000801b61169781612150565b61169f612164565b6116a7612a9c565b50565b60036020528060005260406000206000915090505481565b6000806116cd612b0e565b90506116f683826000016000878152602001908152602001600020612b3690919063ffffffff16565b91505092915050565b60008061170a6121a5565b905080600001600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000801b61178581612150565b61178d612164565b6000600260156101000a81548160ff0219169083151502179055507f47cde597549e567f62abfbbd7555049ff4279b031185a8849e0c393b67aeff2760006040516117d89190613952565b60405180910390a150565b606060006117ef61210e565b9050806004018054611800906142e9565b80601f016020809104026020016040519081016040528092919081815260200182805461182c906142e9565b80156118795780601f1061184e57610100808354040283529160200191611879565b820191906000526020600020905b81548152906001019060200180831161185c57829003601f168201915b505050505091505090565b6000801b81565b6000801b61189881612150565b6118a0612164565b6001600260156101000a81548160ff0219169083151502179055507f47cde597549e567f62abfbbd7555049ff4279b031185a8849e0c393b67aeff2760016040516118eb9190613952565b60405180910390a150565b60006040517fa744719900000000000000000000000000000000000000000000000000000000815260040161192a906146e0565b60405180910390fd5b600260159054906101000a900460ff1681565b6000801b61195381612150565b61195b612164565b600082036119a057816040517f8374bf350000000000000000000000000000000000000000000000000000000081526004016119979190613b02565b60405180910390fd5b6119aa3084612b50565b826003600084815260200190815260200160002060008282546119cd9190614700565b925050819055507fd695b9e92e02a1f6153a5e6ff0bc7427009e9bab903ed61aa38ccef88e17c11a8383604051611a059291906145bb565b60405180910390a1505050565b6000611a3e7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb836116ff565b9050919050565b6000801b611a5281612150565b611a5a6124eb565b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611aec57506005600083815260200190815260200160002060000160149054906101000a900460ff16155b15611b6657816005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517ff2a3d6e9000000000000000000000000000000000000000000000000000000008152600401611b5d929190614734565b60405180910390fd5b60006005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663902b57e8600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611bf99190613c39565b6020604051808303816000875af1158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c91906145f9565b90507f836ccd058015f1dbad25f9fa6311144eb705bcace1a8ccc0cdf285bde566310f8382604051611c6f9291906145bb565b60405180910390a1505050565b600080611c87612b0e565b9050611ca6816000016000858152602001908152602001600020612bd2565b915050919050565b6000801b611cbb81612150565b611cc3612164565b8251845114611d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfe906147cf565b60405180910390fd5b60005b8451811015611d6557611d52858281518110611d2957611d286143e3565b5b6020026020010151858381518110611d4457611d436143e3565b5b602002602001015185612be7565b8080611d5d90614441565b915050611d0a565b5050505050565b7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb81565b611d9982610b8c565b611da281612150565b611dac8383612496565b50505050565b6000801b611dbf81612150565b611dc7612164565b611dd2848484612be7565b50505050565b600080611de361210e565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b6000801b611ecb81612150565b611ed3612164565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f4457816040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401611f3b9190613c39565b60405180910390fd5b611f6e7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb836116ff565b611faf57816040517f516af281000000000000000000000000000000000000000000000000000000008152600401611fa69190613c39565b60405180910390fd5b611fd97f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb83612496565b507fc5a4a43135540d5e0967677a1ed86bf147f7c0e7dd757a109f4cff74c945f92e826040516120099190613c39565b60405180910390a15050565b6000801b61202281612150565b61202a612164565b60005b825181101561206a5761205983828151811061204c5761204b6143e3565b5b60200260200101516121cd565b8061206390614441565b905061202d565b505050565b6004602052816000526040600020602052806000526040600020600091509150505481565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612107575061210682612e3e565b5b9050919050565b60007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b600033905090565b61214b8383836001612ea8565b505050565b6121618161215c612136565b61308e565b50565b61216c611252565b156121a3576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b6000801b6121da81612150565b6121e2612164565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361225357816040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815260040161224a9190613c39565b60405180910390fd5b61227d7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb836116ff565b156122bf57816040517f20da51c60000000000000000000000000000000000000000000000000000000081526004016122b69190613c39565b60405180910390fd5b6122e97f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb83612325565b507fc2dabef8a63ab48fcf728bbe8864a3fe01a9e19addc6ce314abd5b6f9a1dce66826040516123199190613c39565b60405180910390a15050565b600080612330612b0e565b9050600061233e85856130df565b9050801561236f5761236d848360000160008881526020019081526020016000206131e090919063ffffffff16565b505b809250505092915050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6123aa613210565b60006123b461210e565b9050828160030190816123c79190614991565b50818160040190816123d99190614991565b50505050565b6123e7613210565b60006123f1613250565b90506001816000018190555050565b612408613210565b565b612412613210565b565b60006124238360000183613278565b905092915050565b60006124356121a5565b9050600061244284610b8c565b905082826000016000868152602001908152602001600020600101819055508281857fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a450505050565b6000806124a1612b0e565b905060006124af85856132e8565b905080156124e0576124de848360000160008881526020019081526020016000206133ea90919063ffffffff16565b505b809250505092915050565b6124f3611252565b612529576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6125336124eb565b600061253d61259d565b905060008160000160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612585612136565b6040516125929190613c39565b60405180910390a150565b60007fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b60006125cf613250565b9050600281600001540361260f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661265d612136565b73ffffffffffffffffffffffffffffffffffffffff16036126bc57612680612136565b6040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016126b39190613c39565b60405180910390fd5b6126ed7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb6126e8612136565b6116ff565b612735576126f9612136565b6040517f516af28100000000000000000000000000000000000000000000000000000000815260040161272c9190613c39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806127c757506005600082815260200190815260200160002060000160149054906101000a900460ff16155b1561284157806005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517ff2a3d6e9000000000000000000000000000000000000000000000000000000008152600401612838929190614734565b60405180910390fd5b600060036000838152602001908152602001600020540361289957806040517f441c68440000000000000000000000000000000000000000000000000000000081526004016128909190613b02565b60405180910390fd5b60006004600083815260200190815260200160002060006128b8612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361298c57600460008281526020019081526020016000206000612915612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f929a0f990000000000000000000000000000000000000000000000000000000081526004016129839190613b02565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a015760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016129f89190613c39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a735760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401612a6a9190613c39565b60405180910390fd5b612a7e83838361341a565b505050565b6000612a8d613250565b90506001816000018190555050565b612aa4612164565b6000612aae61259d565b905060018160000160006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612af6612136565b604051612b039190613c39565b60405180910390a150565b60007fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000905090565b6000612b458360000183613432565b60001c905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612bc25760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401612bb99190613c39565b60405180910390fd5b612bce8260008361341a565b5050565b6000612be08260000161345d565b9050919050565b6000801b612bf481612150565b612bfc612164565b60008203612c4157816040517f8374bf35000000000000000000000000000000000000000000000000000000008152600401612c389190613b02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612cb257836040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401612ca99190613c39565b60405180910390fd5b60008303612cf757826040517f3728b83d000000000000000000000000000000000000000000000000000000008152600401612cee9190613b02565b60405180910390fd5b612d217f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb856116ff565b612d6257836040517f516af281000000000000000000000000000000000000000000000000000000008152600401612d599190613c39565b60405180910390fd5b612d6c848461346e565b82600360008481526020019081526020016000206000828254612d8f9190614a63565b92505081905550826004600084815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612df69190614a63565b925050819055507f3d8334eb8444d4c18d9b6d1024bce3ad9f408e72f419cb589dcb5e24d0e09af8848484604051612e3093929190614626565b60405180910390a150505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000612eb261210e565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612f265760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401612f1d9190613c39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612f985760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401612f8f9190613c39565b60405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508115613087578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161307e9190613b02565b60405180910390a35b5050505050565b61309882826116ff565b6130db5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016130d2929190614a97565b60405180910390fd5b5050565b6000806130ea6121a5565b90506130f684846116ff565b6131d457600181600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613170612136565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506131da565b60009150505b92915050565b6000613208836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613278565b905092915050565b6132186134f0565b61324e576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b60006132848383613510565b6132dd5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506132e2565b600090505b92915050565b6000806132f36121a5565b90506132ff84846116ff565b156133de57600081600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061337a612136565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019150506133e4565b60009150505b92915050565b6000613412836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613533565b905092915050565b613422612164565b61342d838383613647565b505050565b600082600001828154811061344a576134496143e3565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036134e05760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016134d79190613c39565b60405180910390fd5b6134ec6000838361341a565b5050565b60006134fa61237a565b60000160089054906101000a900460ff16905090565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461363b5760006001826135659190614700565b905060006001866000018054905061357d9190614700565b90508082146135ec57600086600001828154811061359e5761359d6143e3565b5b90600052602060002001549050808760000184815481106135c2576135c16143e3565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613600576135ff614ac0565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613641565b60009150505b92915050565b61364f612164565b61365a83838361365f565b505050565b600061366961210e565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036136bf57818160020160008282546136b39190614a63565b92505081905550613798565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561374e578481846040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161374593929190614626565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036137e357818160020160008282540392505081905550613833565b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516138909190613b02565b60405180910390a350505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6138e7816138b2565b81146138f257600080fd5b50565b600081359050613904816138de565b92915050565b6000602082840312156139205761391f6138a8565b5b600061392e848285016138f5565b91505092915050565b60008115159050919050565b61394c81613937565b82525050565b60006020820190506139676000830184613943565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139a757808201518184015260208101905061398c565b60008484015250505050565b6000601f19601f8301169050919050565b60006139cf8261396d565b6139d98185613978565b93506139e9818560208601613989565b6139f2816139b3565b840191505092915050565b60006020820190508181036000830152613a1781846139c4565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613a4a82613a1f565b9050919050565b613a5a81613a3f565b8114613a6557600080fd5b50565b600081359050613a7781613a51565b92915050565b6000819050919050565b613a9081613a7d565b8114613a9b57600080fd5b50565b600081359050613aad81613a87565b92915050565b60008060408385031215613aca57613ac96138a8565b5b6000613ad885828601613a68565b9250506020613ae985828601613a9e565b9150509250929050565b613afc81613a7d565b82525050565b6000602082019050613b176000830184613af3565b92915050565b600080600060608486031215613b3657613b356138a8565b5b6000613b4486828701613a68565b9350506020613b5586828701613a68565b9250506040613b6686828701613a9e565b9150509250925092565b6000819050919050565b613b8381613b70565b8114613b8e57600080fd5b50565b600081359050613ba081613b7a565b92915050565b600060208284031215613bbc57613bbb6138a8565b5b6000613bca84828501613b91565b91505092915050565b613bdc81613b70565b82525050565b6000602082019050613bf76000830184613bd3565b92915050565b600060208284031215613c1357613c126138a8565b5b6000613c2184828501613a68565b91505092915050565b613c3381613a3f565b82525050565b6000602082019050613c4e6000830184613c2a565b92915050565b60008060408385031215613c6b57613c6a6138a8565b5b6000613c7985828601613b91565b9250506020613c8a85828601613a68565b9150509250929050565b600060ff82169050919050565b613caa81613c94565b82525050565b6000602082019050613cc56000830184613ca1565b92915050565b613cd481613c94565b8114613cdf57600080fd5b50565b600081359050613cf181613ccb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112613d1c57613d1b613cf7565b5b8235905067ffffffffffffffff811115613d3957613d38613cfc565b5b602083019150836020820283011115613d5557613d54613d01565b5b9250929050565b60008060008060608587031215613d7657613d756138a8565b5b6000613d8487828801613ce2565b9450506020613d9587828801613a68565b935050604085013567ffffffffffffffff811115613db657613db56138ad565b5b613dc287828801613d06565b925092505092959194509250565b613dd981613937565b8114613de457600080fd5b50565b600081359050613df681613dd0565b92915050565b60008060408385031215613e1357613e126138a8565b5b6000613e2185828601613a9e565b9250506020613e3285828601613de7565b9150509250929050565b600060208284031215613e5257613e516138a8565b5b6000613e6084828501613a9e565b91505092915050565b60008060408385031215613e8057613e7f6138a8565b5b6000613e8e85828601613b91565b9250506020613e9f85828601613a9e565b9150509250929050565b60008060408385031215613ec057613ebf6138a8565b5b6000613ece85828601613a9e565b9250506020613edf85828601613a9e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f21826139b3565b810181811067ffffffffffffffff82111715613f4057613f3f613ee9565b5b80604052505050565b6000613f5361389e565b9050613f5f8282613f18565b919050565b600067ffffffffffffffff821115613f7f57613f7e613ee9565b5b602082029050602081019050919050565b6000613fa3613f9e84613f64565b613f49565b90508083825260208201905060208402830185811115613fc657613fc5613d01565b5b835b81811015613fef5780613fdb8882613a68565b845260208401935050602081019050613fc8565b5050509392505050565b600082601f83011261400e5761400d613cf7565b5b813561401e848260208601613f90565b91505092915050565b600067ffffffffffffffff82111561404257614041613ee9565b5b602082029050602081019050919050565b600061406661406184614027565b613f49565b9050808382526020820190506020840283018581111561408957614088613d01565b5b835b818110156140b2578061409e8882613a9e565b84526020840193505060208101905061408b565b5050509392505050565b600082601f8301126140d1576140d0613cf7565b5b81356140e1848260208601614053565b91505092915050565b600080600060608486031215614103576141026138a8565b5b600084013567ffffffffffffffff811115614121576141206138ad565b5b61412d86828701613ff9565b935050602084013567ffffffffffffffff81111561414e5761414d6138ad565b5b61415a868287016140bc565b925050604061416b86828701613a9e565b9150509250925092565b60008060006060848603121561418e5761418d6138a8565b5b600061419c86828701613a68565b93505060206141ad86828701613a9e565b92505060406141be86828701613a9e565b9150509250925092565b600080604083850312156141df576141de6138a8565b5b60006141ed85828601613a68565b92505060206141fe85828601613a68565b9150509250929050565b600060408201905061421d6000830185613c2a565b61422a6020830184613943565b9392505050565b600060208284031215614247576142466138a8565b5b600082013567ffffffffffffffff811115614265576142646138ad565b5b61427184828501613ff9565b91505092915050565b60008060408385031215614291576142906138a8565b5b600061429f85828601613a9e565b92505060206142b085828601613a68565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061430157607f821691505b602082108103614314576143136142ba565b5b50919050565b600060608201905061432f6000830186613af3565b61433c6020830185613c2a565b6143496040830184613c2a565b949350505050565b7f52455349546f6b656e3a204e4f205452414e534645522046524f4d20414c4c4f60008201527f5745440000000000000000000000000000000000000000000000000000000000602082015250565b60006143ad602383613978565b91506143b882614351565b604082019050919050565b600060208201905081810360008301526143dc816143a0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061444c82613a7d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361447e5761447d614412565b5b600182019050919050565b600060408201905061449e6000830185613c2a565b6144ab6020830184613ca1565b9392505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006144f56144f06144eb846144b2565b6144d0565b6144bc565b9050919050565b614505816144da565b82525050565b600060208201905061452060008301846144fc565b92915050565b600060408201905061453b6000830185613af3565b6145486020830184613943565b9392505050565b7f52455349546f6b656e3a2045786974732064697361626c656400000000000000600082015250565b6000614585601983613978565b91506145908261454f565b602082019050919050565b600060208201905081810360008301526145b481614578565b9050919050565b60006040820190506145d06000830185613af3565b6145dd6020830184613af3565b9392505050565b6000815190506145f381613a87565b92915050565b60006020828403121561460f5761460e6138a8565b5b600061461d848285016145e4565b91505092915050565b600060608201905061463b6000830186613c2a565b6146486020830185613af3565b6146556040830184613af3565b949350505050565b60006060820190506146726000830186613af3565b61467f6020830185613af3565b61468c6040830184613af3565b949350505050565b7f52455349546f6b656e3a204e4f205452414e5346455220414c4c4f5745440000600082015250565b60006146ca601e83613978565b91506146d582614694565b602082019050919050565b600060208201905081810360008301526146f9816146bd565b9050919050565b600061470b82613a7d565b915061471683613a7d565b925082820390508181111561472e5761472d614412565b5b92915050565b60006040820190506147496000830185613af3565b6147566020830184613c2a565b9392505050565b7f52455349546f6b656e3a20757365727320616e6420616d6f756e7473206c656e60008201527f677468206d69736d617463680000000000000000000000000000000000000000602082015250565b60006147b9602c83613978565b91506147c48261475d565b604082019050919050565b600060208201905081810360008301526147e8816147ac565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026148517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614814565b61485b8683614814565b95508019841693508086168417925050509392505050565b600061488e61488961488484613a7d565b6144d0565b613a7d565b9050919050565b6000819050919050565b6148a883614873565b6148bc6148b482614895565b848454614821565b825550505050565b600090565b6148d16148c4565b6148dc81848461489f565b505050565b5b81811015614900576148f56000826148c9565b6001810190506148e2565b5050565b601f82111561494557614916816147ef565b61491f84614804565b8101602085101561492e578190505b61494261493a85614804565b8301826148e1565b50505b505050565b600082821c905092915050565b60006149686000198460080261494a565b1980831691505092915050565b60006149818383614957565b9150826002028217905092915050565b61499a8261396d565b67ffffffffffffffff8111156149b3576149b2613ee9565b5b6149bd82546142e9565b6149c8828285614904565b600060209050601f8311600181146149fb57600084156149e9578287015190505b6149f38582614975565b865550614a5b565b601f198416614a09866147ef565b60005b82811015614a3157848901518255600182019150602085019450602081019050614a0c565b86831015614a4e5784890151614a4a601f891682614957565b8355505b6001600288020188555050505b505050505050565b6000614a6e82613a7d565b9150614a7983613a7d565b9250828201905080821115614a9157614a90614412565b5b92915050565b6000604082019050614aac6000830185613c2a565b614ab96020830184613bd3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212201923113467a361a2953f49355dbee8381f9144045fa4e8fc291b8197b84bf85e64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102745760003560e01c80638a01860d11610151578063b9a53442116100c3578063dd44137511610087578063dd44137514610749578063dd62ed3e14610765578063e8365c2114610795578063ec969386146107c6578063f629c184146107e2578063fff12f77146107fe57610274565b8063b9a53442146106a7578063ca15c873146106c3578063cd0d51c8146106f3578063ce3d78d61461070f578063d547741f1461072d57610274565b8063a217fddf11610115578063a217fddf146105e5578063a62d8f0914610603578063a9059cbb1461060d578063aafadb011461063d578063b390c0ab1461065b578063b6b6b4751461067757610274565b80638a01860d1461052d5780639010d07c1461055d57806391d148541461058d578063927814fc146105bd57806395d89b41146105c757610274565b806336432b4c116101ea57806354fd4d50116101ae57806354fd4d501461047f5780635c975abb1461049d57806370a08231146104bb57806379cc6790146104eb5780637f8661a1146105075780638456cb591461052357610274565b806336432b4c1461040557806336568abe146104215780633ca74dca1461043d5780633f4ba83a1461045957806342966c681461046357610274565b806323b872dd1161023c57806323b872dd14610331578063248a9ca31461036157806325f5ffa4146103915780632d2c5565146103ad5780632f2ff15d146103cb578063313ce567146103e757610274565b806301ffc9a71461027957806306fdde03146102a9578063095ea7b3146102c757806309f6bc23146102f757806318160ddd14610313575b600080fd5b610293600480360381019061028e919061390a565b61082e565b6040516102a09190613952565b60405180910390f35b6102b16108a8565b6040516102be91906139fd565b60405180910390f35b6102e160048036038101906102dc9190613ab3565b610949565b6040516102ee9190613952565b60405180910390f35b610311600480360381019061030c9190613ab3565b61096c565b005b61031b610b37565b6040516103289190613b02565b60405180910390f35b61034b60048036038101906103469190613b1d565b610b4f565b6040516103589190613952565b60405180910390f35b61037b60048036038101906103769190613ba6565b610b8c565b6040516103889190613be2565b60405180910390f35b6103ab60048036038101906103a69190613bfd565b610bba565b005b6103b5610bdc565b6040516103c29190613c39565b60405180910390f35b6103e560048036038101906103e09190613c54565b610c02565b005b6103ef610c24565b6040516103fc9190613cb0565b60405180910390f35b61041f600480360381019061041a9190613d5c565b610c3b565b005b61043b60048036038101906104369190613c54565b611082565b005b61045760048036038101906104529190613dfc565b6110fd565b005b6104616111c3565b005b61047d60048036038101906104789190613e3c565b6111e3565b005b610487611215565b60405161049491906139fd565b60405180910390f35b6104a5611252565b6040516104b29190613952565b60405180910390f35b6104d560048036038101906104d09190613bfd565b611277565b6040516104e29190613b02565b60405180910390f35b61050560048036038101906105009190613ab3565b6112ce565b005b610521600480360381019061051c9190613e3c565b611300565b005b61052b61168a565b005b61054760048036038101906105429190613e3c565b6116aa565b6040516105549190613b02565b60405180910390f35b61057760048036038101906105729190613e69565b6116c2565b6040516105849190613c39565b60405180910390f35b6105a760048036038101906105a29190613c54565b6116ff565b6040516105b49190613952565b60405180910390f35b6105c5611778565b005b6105cf6117e3565b6040516105dc91906139fd565b60405180910390f35b6105ed611884565b6040516105fa9190613be2565b60405180910390f35b61060b61188b565b005b61062760048036038101906106229190613ab3565b6118f6565b6040516106349190613952565b60405180910390f35b610645611933565b6040516106529190613952565b60405180910390f35b61067560048036038101906106709190613ea9565b611946565b005b610691600480360381019061068c9190613bfd565b611a12565b60405161069e9190613952565b60405180910390f35b6106c160048036038101906106bc9190613e3c565b611a45565b005b6106dd60048036038101906106d89190613ba6565b611c7c565b6040516106ea9190613b02565b60405180910390f35b61070d600480360381019061070891906140ea565b611cae565b005b610717611d6c565b6040516107249190613be2565b60405180910390f35b61074760048036038101906107429190613c54565b611d90565b005b610763600480360381019061075e9190614175565b611db2565b005b61077f600480360381019061077a91906141c8565b611dd8565b60405161078c9190613b02565b60405180910390f35b6107af60048036038101906107aa9190613e3c565b611e6d565b6040516107bd929190614208565b60405180910390f35b6107e060048036038101906107db9190613bfd565b611ebe565b005b6107fc60048036038101906107f79190614231565b612015565b005b6108186004803603810190610813919061427a565b61206f565b6040516108259190613b02565b60405180910390f35b60007f5a05180f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806108a157506108a082612094565b5b9050919050565b606060006108b461210e565b90508060030180546108c5906142e9565b80601f01602080910402602001604051908101604052809291908181526020018280546108f1906142e9565b801561093e5780601f106109135761010080835404028352916020019161093e565b820191906000526020600020905b81548152906001019060200180831161092157829003601f168201915b505050505091505090565b600080610954612136565b905061096181858561213e565b600191505092915050565b6000801b61097981612150565b610981612164565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036109f257826040517faf7301ae0000000000000000000000000000000000000000000000000000000081526004016109e99190613c39565b60405180910390fd5b60008203610a3757816040517f8374bf35000000000000000000000000000000000000000000000000000000008152600401610a2e9190613b02565b60405180910390fd5b60006005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050836005600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060016005600085815260200190815260200160002060000160146101000a81548160ff0219169083151502179055507f2a22b8081e985f611f3d994c0daf30de3f593e1b7bd89e55540fbfd014a503d5838286604051610b299392919061431a565b60405180910390a150505050565b600080610b4261210e565b9050806002015491505090565b60006040517fb77a6239000000000000000000000000000000000000000000000000000000008152600401610b83906143c3565b60405180910390fd5b600080610b976121a5565b905080600001600084815260200190815260200160002060010154915050919050565b6000801b610bc781612150565b610bcf612164565b610bd8826121cd565b5050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c0b82610b8c565b610c1481612150565b610c1e8383612325565b50505050565b6000600260009054906101000a900460ff16905090565b6000610c4561237a565b905060008160000160089054906101000a900460ff1615905060008260000160009054906101000a900467ffffffffffffffff1690506000808267ffffffffffffffff16148015610c935750825b9050600060018367ffffffffffffffff16148015610cc8575060003073ffffffffffffffffffffffffffffffffffffffff163b145b905081158015610cd6575080155b15610d0d576040517ff92ee8a900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60018560000160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055508315610d5d5760018560000160086101000a81548160ff0219169083151502179055505b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1603610dce57876040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401610dc59190613c39565b60405180910390fd5b60008960ff1603610e1657886040517fca950391000000000000000000000000000000000000000000000000000000008152600401610e0d9190613cb0565b60405180910390fd5b610e8a6040518060400160405280600a81526020017f524553492d544f4b454e000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f52455349000000000000000000000000000000000000000000000000000000008152506123a2565b610e926123df565b610e9a612400565b610ea261240a565b610ed67f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb600061241490919063ffffffff16565b5088600260006101000a81548160ff021916908360ff16021790555087600260016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610f626000801b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16612325565b50610f907f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb6000801b61242b565b60005b87879050811015610fe157610fce888883818110610fb457610fb36143e3565b5b9050602002016020810190610fc99190613bfd565b6121cd565b8080610fd990614441565b915050610f93565b507fd15abd6de84703abf7bac7ca89b7e370f1039b4d328a0f9b57306b484c1b19bb888a604051611013929190614489565b60405180910390a183156110775760008560000160086101000a81548160ff0219169083151502179055507fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2600160405161106e919061450b565b60405180910390a15b505050505050505050565b61108a612136565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146110ee576040517f6697b23200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110f88282612496565b505050565b6000801b61110a81612150565b611112612164565b6000830361115757826040517f8374bf3500000000000000000000000000000000000000000000000000000000815260040161114e9190613b02565b60405180910390fd5b816005600085815260200190815260200160002060000160146101000a81548160ff0219169083151502179055507f3995ebfca9daa9de928a16322fcdc0be8809444e355b33b0d395338bc48d4c4783836040516111b6929190614526565b60405180910390a1505050565b6000801b6111d081612150565b6111d86124eb565b6111e061252b565b50565b6040517f28b6a5f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60606040518060400160405280600581526020017f312e302e30000000000000000000000000000000000000000000000000000000815250905090565b60008061125d61259d565b90508060000160009054906101000a900460ff1691505090565b60008061128261210e565b90508060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915050919050565b6040517f28b6a5f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611308611252565b1580156113215750600260159054906101000a900460ff165b611360576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113579061459b565b60405180910390fd5b6113686125c5565b6113718161261c565b6000600460008381526020019081526020016000206000611390612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060006005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663af024b108360036000878152602001908152602001600020546040518363ffffffff1660e01b81526004016114539291906145bb565b602060405180830381865afa158015611470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061149491906145f9565b90506000811115611629576114b16114aa612136565b308461298f565b6005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f297be6661150b612136565b8460036000888152602001908152602001600020546040518463ffffffff1660e01b815260040161153e93929190614626565b600060405180830381600087803b15801561155857600080fd5b505af115801561156c573d6000803e3d6000fd5b50505050600060046000858152602001908152602001600020600061158f612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506115d5612136565b73ffffffffffffffffffffffffffffffffffffffff167fbe0b6e5b3195df91f2e6b2b20501f84b085714f9e38073f499073c8305651009828560405161161c9291906145bb565b60405180910390a261167d565b816003600085815260200190815260200160002054826040517f8fcefc700000000000000000000000000000000000000000000000000000000081526004016116749392919061465d565b60405180910390fd5b5050611687612a83565b50565b6000801b61169781612150565b61169f612164565b6116a7612a9c565b50565b60036020528060005260406000206000915090505481565b6000806116cd612b0e565b90506116f683826000016000878152602001908152602001600020612b3690919063ffffffff16565b91505092915050565b60008061170a6121a5565b905080600001600085815260200190815260200160002060000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1691505092915050565b6000801b61178581612150565b61178d612164565b6000600260156101000a81548160ff0219169083151502179055507f47cde597549e567f62abfbbd7555049ff4279b031185a8849e0c393b67aeff2760006040516117d89190613952565b60405180910390a150565b606060006117ef61210e565b9050806004018054611800906142e9565b80601f016020809104026020016040519081016040528092919081815260200182805461182c906142e9565b80156118795780601f1061184e57610100808354040283529160200191611879565b820191906000526020600020905b81548152906001019060200180831161185c57829003601f168201915b505050505091505090565b6000801b81565b6000801b61189881612150565b6118a0612164565b6001600260156101000a81548160ff0219169083151502179055507f47cde597549e567f62abfbbd7555049ff4279b031185a8849e0c393b67aeff2760016040516118eb9190613952565b60405180910390a150565b60006040517fa744719900000000000000000000000000000000000000000000000000000000815260040161192a906146e0565b60405180910390fd5b600260159054906101000a900460ff1681565b6000801b61195381612150565b61195b612164565b600082036119a057816040517f8374bf350000000000000000000000000000000000000000000000000000000081526004016119979190613b02565b60405180910390fd5b6119aa3084612b50565b826003600084815260200190815260200160002060008282546119cd9190614700565b925050819055507fd695b9e92e02a1f6153a5e6ff0bc7427009e9bab903ed61aa38ccef88e17c11a8383604051611a059291906145bb565b60405180910390a1505050565b6000611a3e7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb836116ff565b9050919050565b6000801b611a5281612150565b611a5a6124eb565b600073ffffffffffffffffffffffffffffffffffffffff166005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161480611aec57506005600083815260200190815260200160002060000160149054906101000a900460ff16155b15611b6657816005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517ff2a3d6e9000000000000000000000000000000000000000000000000000000008152600401611b5d929190614734565b60405180910390fd5b60006005600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663902b57e8600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518263ffffffff1660e01b8152600401611bf99190613c39565b6020604051808303816000875af1158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c91906145f9565b90507f836ccd058015f1dbad25f9fa6311144eb705bcace1a8ccc0cdf285bde566310f8382604051611c6f9291906145bb565b60405180910390a1505050565b600080611c87612b0e565b9050611ca6816000016000858152602001908152602001600020612bd2565b915050919050565b6000801b611cbb81612150565b611cc3612164565b8251845114611d07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cfe906147cf565b60405180910390fd5b60005b8451811015611d6557611d52858281518110611d2957611d286143e3565b5b6020026020010151858381518110611d4457611d436143e3565b5b602002602001015185612be7565b8080611d5d90614441565b915050611d0a565b5050505050565b7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb81565b611d9982610b8c565b611da281612150565b611dac8383612496565b50505050565b6000801b611dbf81612150565b611dc7612164565b611dd2848484612be7565b50505050565b600080611de361210e565b90508060010160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205491505092915050565b60056020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b6000801b611ecb81612150565b611ed3612164565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611f4457816040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401611f3b9190613c39565b60405180910390fd5b611f6e7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb836116ff565b611faf57816040517f516af281000000000000000000000000000000000000000000000000000000008152600401611fa69190613c39565b60405180910390fd5b611fd97f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb83612496565b507fc5a4a43135540d5e0967677a1ed86bf147f7c0e7dd757a109f4cff74c945f92e826040516120099190613c39565b60405180910390a15050565b6000801b61202281612150565b61202a612164565b60005b825181101561206a5761205983828151811061204c5761204b6143e3565b5b60200260200101516121cd565b8061206390614441565b905061202d565b505050565b6004602052816000526040600020602052806000526040600020600091509150505481565b60007f7965db0b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161480612107575061210682612e3e565b5b9050919050565b60007f52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00905090565b600033905090565b61214b8383836001612ea8565b505050565b6121618161215c612136565b61308e565b50565b61216c611252565b156121a3576040517fd93c066500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f02dd7bc7dec4dceedda775e58dd541e08a116c6c53815c0bd028192f7b626800905090565b6000801b6121da81612150565b6121e2612164565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361225357816040517f8e4c8aa600000000000000000000000000000000000000000000000000000000815260040161224a9190613c39565b60405180910390fd5b61227d7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb836116ff565b156122bf57816040517f20da51c60000000000000000000000000000000000000000000000000000000081526004016122b69190613c39565b60405180910390fd5b6122e97f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb83612325565b507fc2dabef8a63ab48fcf728bbe8864a3fe01a9e19addc6ce314abd5b6f9a1dce66826040516123199190613c39565b60405180910390a15050565b600080612330612b0e565b9050600061233e85856130df565b9050801561236f5761236d848360000160008881526020019081526020016000206131e090919063ffffffff16565b505b809250505092915050565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b6123aa613210565b60006123b461210e565b9050828160030190816123c79190614991565b50818160040190816123d99190614991565b50505050565b6123e7613210565b60006123f1613250565b90506001816000018190555050565b612408613210565b565b612412613210565b565b60006124238360000183613278565b905092915050565b60006124356121a5565b9050600061244284610b8c565b905082826000016000868152602001908152602001600020600101819055508281857fbd79b86ffe0ab8e8776151514217cd7cacd52c909f66475c3af44e129f0b00ff60405160405180910390a450505050565b6000806124a1612b0e565b905060006124af85856132e8565b905080156124e0576124de848360000160008881526020019081526020016000206133ea90919063ffffffff16565b505b809250505092915050565b6124f3611252565b612529576040517f8dfc202b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b6125336124eb565b600061253d61259d565b905060008160000160006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa612585612136565b6040516125929190613c39565b60405180910390a150565b60007fcd5ed15c6e187e77e9aee88184c21f4f2182ab5827cb3b7e07fbedcd63f03300905090565b60006125cf613250565b9050600281600001540361260f576040517f3ee5aeb500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002816000018190555050565b600260019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1661265d612136565b73ffffffffffffffffffffffffffffffffffffffff16036126bc57612680612136565b6040517f8e4c8aa60000000000000000000000000000000000000000000000000000000081526004016126b39190613c39565b60405180910390fd5b6126ed7f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb6126e8612136565b6116ff565b612735576126f9612136565b6040517f516af28100000000000000000000000000000000000000000000000000000000815260040161272c9190613c39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff166005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614806127c757506005600082815260200190815260200160002060000160149054906101000a900460ff16155b1561284157806005600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040517ff2a3d6e9000000000000000000000000000000000000000000000000000000008152600401612838929190614734565b60405180910390fd5b600060036000838152602001908152602001600020540361289957806040517f441c68440000000000000000000000000000000000000000000000000000000081526004016128909190613b02565b60405180910390fd5b60006004600083815260200190815260200160002060006128b8612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361298c57600460008281526020019081526020016000206000612915612136565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546040517f929a0f990000000000000000000000000000000000000000000000000000000081526004016129839190613b02565b60405180910390fd5b50565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603612a015760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016129f89190613c39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612a735760006040517fec442f05000000000000000000000000000000000000000000000000000000008152600401612a6a9190613c39565b60405180910390fd5b612a7e83838361341a565b505050565b6000612a8d613250565b90506001816000018190555050565b612aa4612164565b6000612aae61259d565b905060018160000160006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612af6612136565b604051612b039190613c39565b60405180910390a150565b60007fc1f6fe24621ce81ec5827caf0253cadb74709b061630e6b55e82371705932000905090565b6000612b458360000183613432565b60001c905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603612bc25760006040517f96c6fd1e000000000000000000000000000000000000000000000000000000008152600401612bb99190613c39565b60405180910390fd5b612bce8260008361341a565b5050565b6000612be08260000161345d565b9050919050565b6000801b612bf481612150565b612bfc612164565b60008203612c4157816040517f8374bf35000000000000000000000000000000000000000000000000000000008152600401612c389190613b02565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612cb257836040517f8e4c8aa6000000000000000000000000000000000000000000000000000000008152600401612ca99190613c39565b60405180910390fd5b60008303612cf757826040517f3728b83d000000000000000000000000000000000000000000000000000000008152600401612cee9190613b02565b60405180910390fd5b612d217f108e9970bf0b59c2d2c85b4c1102be0833ce2f80d7a6e37034d625e36d761eeb856116ff565b612d6257836040517f516af281000000000000000000000000000000000000000000000000000000008152600401612d599190613c39565b60405180910390fd5b612d6c848461346e565b82600360008481526020019081526020016000206000828254612d8f9190614a63565b92505081905550826004600084815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612df69190614a63565b925050819055507f3d8334eb8444d4c18d9b6d1024bce3ad9f408e72f419cb589dcb5e24d0e09af8848484604051612e3093929190614626565b60405180910390a150505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b6000612eb261210e565b9050600073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1603612f265760006040517fe602df05000000000000000000000000000000000000000000000000000000008152600401612f1d9190613c39565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1603612f985760006040517f94280d62000000000000000000000000000000000000000000000000000000008152600401612f8f9190613c39565b60405180910390fd5b828160010160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508115613087578373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258560405161307e9190613b02565b60405180910390a35b5050505050565b61309882826116ff565b6130db5780826040517fe2517d3f0000000000000000000000000000000000000000000000000000000081526004016130d2929190614a97565b60405180910390fd5b5050565b6000806130ea6121a5565b90506130f684846116ff565b6131d457600181600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550613170612136565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a460019150506131da565b60009150505b92915050565b6000613208836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613278565b905092915050565b6132186134f0565b61324e576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b60007f9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00905090565b60006132848383613510565b6132dd5782600001829080600181540180825580915050600190039060005260206000200160009091909190915055826000018054905083600101600084815260200190815260200160002081905550600190506132e2565b600090505b92915050565b6000806132f36121a5565b90506132ff84846116ff565b156133de57600081600001600086815260200190815260200160002060000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff02191690831515021790555061337a612136565b73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16857ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a460019150506133e4565b60009150505b92915050565b6000613412836000018373ffffffffffffffffffffffffffffffffffffffff1660001b613533565b905092915050565b613422612164565b61342d838383613647565b505050565b600082600001828154811061344a576134496143e3565b5b9060005260206000200154905092915050565b600081600001805490509050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036134e05760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016134d79190613c39565b60405180910390fd5b6134ec6000838361341a565b5050565b60006134fa61237a565b60000160089054906101000a900460ff16905090565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461363b5760006001826135659190614700565b905060006001866000018054905061357d9190614700565b90508082146135ec57600086600001828154811061359e5761359d6143e3565b5b90600052602060002001549050808760000184815481106135c2576135c16143e3565b5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b85600001805480613600576135ff614ac0565b5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050613641565b60009150505b92915050565b61364f612164565b61365a83838361365f565b505050565b600061366961210e565b9050600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036136bf57818160020160008282546136b39190614a63565b92505081905550613798565b60008160000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561374e578481846040517fe450d38c00000000000000000000000000000000000000000000000000000000815260040161374593929190614626565b60405180910390fd5b8281038260000160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036137e357818160020160008282540392505081905550613833565b818160000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516138909190613b02565b60405180910390a350505050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6138e7816138b2565b81146138f257600080fd5b50565b600081359050613904816138de565b92915050565b6000602082840312156139205761391f6138a8565b5b600061392e848285016138f5565b91505092915050565b60008115159050919050565b61394c81613937565b82525050565b60006020820190506139676000830184613943565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156139a757808201518184015260208101905061398c565b60008484015250505050565b6000601f19601f8301169050919050565b60006139cf8261396d565b6139d98185613978565b93506139e9818560208601613989565b6139f2816139b3565b840191505092915050565b60006020820190508181036000830152613a1781846139c4565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000613a4a82613a1f565b9050919050565b613a5a81613a3f565b8114613a6557600080fd5b50565b600081359050613a7781613a51565b92915050565b6000819050919050565b613a9081613a7d565b8114613a9b57600080fd5b50565b600081359050613aad81613a87565b92915050565b60008060408385031215613aca57613ac96138a8565b5b6000613ad885828601613a68565b9250506020613ae985828601613a9e565b9150509250929050565b613afc81613a7d565b82525050565b6000602082019050613b176000830184613af3565b92915050565b600080600060608486031215613b3657613b356138a8565b5b6000613b4486828701613a68565b9350506020613b5586828701613a68565b9250506040613b6686828701613a9e565b9150509250925092565b6000819050919050565b613b8381613b70565b8114613b8e57600080fd5b50565b600081359050613ba081613b7a565b92915050565b600060208284031215613bbc57613bbb6138a8565b5b6000613bca84828501613b91565b91505092915050565b613bdc81613b70565b82525050565b6000602082019050613bf76000830184613bd3565b92915050565b600060208284031215613c1357613c126138a8565b5b6000613c2184828501613a68565b91505092915050565b613c3381613a3f565b82525050565b6000602082019050613c4e6000830184613c2a565b92915050565b60008060408385031215613c6b57613c6a6138a8565b5b6000613c7985828601613b91565b9250506020613c8a85828601613a68565b9150509250929050565b600060ff82169050919050565b613caa81613c94565b82525050565b6000602082019050613cc56000830184613ca1565b92915050565b613cd481613c94565b8114613cdf57600080fd5b50565b600081359050613cf181613ccb565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112613d1c57613d1b613cf7565b5b8235905067ffffffffffffffff811115613d3957613d38613cfc565b5b602083019150836020820283011115613d5557613d54613d01565b5b9250929050565b60008060008060608587031215613d7657613d756138a8565b5b6000613d8487828801613ce2565b9450506020613d9587828801613a68565b935050604085013567ffffffffffffffff811115613db657613db56138ad565b5b613dc287828801613d06565b925092505092959194509250565b613dd981613937565b8114613de457600080fd5b50565b600081359050613df681613dd0565b92915050565b60008060408385031215613e1357613e126138a8565b5b6000613e2185828601613a9e565b9250506020613e3285828601613de7565b9150509250929050565b600060208284031215613e5257613e516138a8565b5b6000613e6084828501613a9e565b91505092915050565b60008060408385031215613e8057613e7f6138a8565b5b6000613e8e85828601613b91565b9250506020613e9f85828601613a9e565b9150509250929050565b60008060408385031215613ec057613ebf6138a8565b5b6000613ece85828601613a9e565b9250506020613edf85828601613a9e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613f21826139b3565b810181811067ffffffffffffffff82111715613f4057613f3f613ee9565b5b80604052505050565b6000613f5361389e565b9050613f5f8282613f18565b919050565b600067ffffffffffffffff821115613f7f57613f7e613ee9565b5b602082029050602081019050919050565b6000613fa3613f9e84613f64565b613f49565b90508083825260208201905060208402830185811115613fc657613fc5613d01565b5b835b81811015613fef5780613fdb8882613a68565b845260208401935050602081019050613fc8565b5050509392505050565b600082601f83011261400e5761400d613cf7565b5b813561401e848260208601613f90565b91505092915050565b600067ffffffffffffffff82111561404257614041613ee9565b5b602082029050602081019050919050565b600061406661406184614027565b613f49565b9050808382526020820190506020840283018581111561408957614088613d01565b5b835b818110156140b2578061409e8882613a9e565b84526020840193505060208101905061408b565b5050509392505050565b600082601f8301126140d1576140d0613cf7565b5b81356140e1848260208601614053565b91505092915050565b600080600060608486031215614103576141026138a8565b5b600084013567ffffffffffffffff811115614121576141206138ad565b5b61412d86828701613ff9565b935050602084013567ffffffffffffffff81111561414e5761414d6138ad565b5b61415a868287016140bc565b925050604061416b86828701613a9e565b9150509250925092565b60008060006060848603121561418e5761418d6138a8565b5b600061419c86828701613a68565b93505060206141ad86828701613a9e565b92505060406141be86828701613a9e565b9150509250925092565b600080604083850312156141df576141de6138a8565b5b60006141ed85828601613a68565b92505060206141fe85828601613a68565b9150509250929050565b600060408201905061421d6000830185613c2a565b61422a6020830184613943565b9392505050565b600060208284031215614247576142466138a8565b5b600082013567ffffffffffffffff811115614265576142646138ad565b5b61427184828501613ff9565b91505092915050565b60008060408385031215614291576142906138a8565b5b600061429f85828601613a9e565b92505060206142b085828601613a68565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061430157607f821691505b602082108103614314576143136142ba565b5b50919050565b600060608201905061432f6000830186613af3565b61433c6020830185613c2a565b6143496040830184613c2a565b949350505050565b7f52455349546f6b656e3a204e4f205452414e534645522046524f4d20414c4c4f60008201527f5745440000000000000000000000000000000000000000000000000000000000602082015250565b60006143ad602383613978565b91506143b882614351565b604082019050919050565b600060208201905081810360008301526143dc816143a0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061444c82613a7d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361447e5761447d614412565b5b600182019050919050565b600060408201905061449e6000830185613c2a565b6144ab6020830184613ca1565b9392505050565b6000819050919050565b600067ffffffffffffffff82169050919050565b6000819050919050565b60006144f56144f06144eb846144b2565b6144d0565b6144bc565b9050919050565b614505816144da565b82525050565b600060208201905061452060008301846144fc565b92915050565b600060408201905061453b6000830185613af3565b6145486020830184613943565b9392505050565b7f52455349546f6b656e3a2045786974732064697361626c656400000000000000600082015250565b6000614585601983613978565b91506145908261454f565b602082019050919050565b600060208201905081810360008301526145b481614578565b9050919050565b60006040820190506145d06000830185613af3565b6145dd6020830184613af3565b9392505050565b6000815190506145f381613a87565b92915050565b60006020828403121561460f5761460e6138a8565b5b600061461d848285016145e4565b91505092915050565b600060608201905061463b6000830186613c2a565b6146486020830185613af3565b6146556040830184613af3565b949350505050565b60006060820190506146726000830186613af3565b61467f6020830185613af3565b61468c6040830184613af3565b949350505050565b7f52455349546f6b656e3a204e4f205452414e5346455220414c4c4f5745440000600082015250565b60006146ca601e83613978565b91506146d582614694565b602082019050919050565b600060208201905081810360008301526146f9816146bd565b9050919050565b600061470b82613a7d565b915061471683613a7d565b925082820390508181111561472e5761472d614412565b5b92915050565b60006040820190506147496000830185613af3565b6147566020830184613c2a565b9392505050565b7f52455349546f6b656e3a20757365727320616e6420616d6f756e7473206c656e60008201527f677468206d69736d617463680000000000000000000000000000000000000000602082015250565b60006147b9602c83613978565b91506147c48261475d565b604082019050919050565b600060208201905081810360008301526147e8816147ac565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026148517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82614814565b61485b8683614814565b95508019841693508086168417925050509392505050565b600061488e61488961488484613a7d565b6144d0565b613a7d565b9050919050565b6000819050919050565b6148a883614873565b6148bc6148b482614895565b848454614821565b825550505050565b600090565b6148d16148c4565b6148dc81848461489f565b505050565b5b81811015614900576148f56000826148c9565b6001810190506148e2565b5050565b601f82111561494557614916816147ef565b61491f84614804565b8101602085101561492e578190505b61494261493a85614804565b8301826148e1565b50505b505050565b600082821c905092915050565b60006149686000198460080261494a565b1980831691505092915050565b60006149818383614957565b9150826002028217905092915050565b61499a8261396d565b67ffffffffffffffff8111156149b3576149b2613ee9565b5b6149bd82546142e9565b6149c8828285614904565b600060209050601f8311600181146149fb57600084156149e9578287015190505b6149f38582614975565b865550614a5b565b601f198416614a09866147ef565b60005b82811015614a3157848901518255600182019150602085019450602081019050614a0c565b86831015614a4e5784890151614a4a601f891682614957565b8355505b6001600288020188555050505b505050505050565b6000614a6e82613a7d565b9150614a7983613a7d565b9250828201905080821115614a9157614a90614412565b5b92915050565b6000604082019050614aac6000830185613c2a565b614ab96020830184613bd3565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea26469706673582212201923113467a361a2953f49355dbee8381f9144045fa4e8fc291b8197b84bf85e64736f6c63430008140033",
  "devdoc": {
    "author": "Alejo Lovallo",
    "errors": {
      "AccessControlBadConfirmation()": [
        {
          "details": "The caller of a function is not the expected one. NOTE: Don't confuse with {AccessControlUnauthorizedAccount}."
        }
      ],
      "AccessControlUnauthorizedAccount(address,bytes32)": [
        {
          "details": "The `account` is missing a role."
        }
      ],
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "EnforcedPause()": [
        {
          "details": "The operation failed because the contract is paused."
        }
      ],
      "ExpectedPause()": [
        {
          "details": "The operation failed because the contract is not paused."
        }
      ],
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "ReentrancyGuardReentrantCall()": [
        {
          "details": "Unauthorized reentrant call."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "RoleAdminChanged(bytes32,bytes32,bytes32)": {
        "details": "Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole` `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite {RoleAdminChanged} not being emitted signaling this."
      },
      "RoleGranted(bytes32,address,address)": {
        "details": "Emitted when `account` is granted `role`. `sender` is the account that originated the contract call, an admin role bearer except when using {AccessControl-_setupRole}."
      },
      "RoleRevoked(bytes32,address,address)": {
        "details": "Emitted when `account` is revoked `role`. `sender` is the account that originated the contract call:   - if using `revokeRole`, it is the admin role bearer   - if using `renounceRole`, it is the role bearer (i.e. `account`)"
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "addBuilder(address)": {
        "details": "Add new builder.",
        "params": {
          "_builder": "address."
        }
      },
      "addBuildersBatch(address[])": {
        "details": "Add builders batch.",
        "params": {
          "_builders": "array of builder addresses."
        }
      },
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "award(address,uint256,uint256)": {
        "details": "Mint builder Resi tokens.",
        "params": {
          "_amount": "amount to mint/award.",
          "_serieId": "serie id.",
          "_to": "builder address."
        }
      },
      "awardBatch(address[],uint256[],uint256)": {
        "details": "Mint batch users",
        "params": {
          "_amounts": "array of amounts.",
          "_serieId": "serie id.",
          "_users": "array of users address (must be builders)."
        }
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "See {ERC20Upgradeable}"
      },
      "burn(uint256,uint256)": {
        "details": "Burn Resi tokens.",
        "params": {
          "_serieId": "serie id.",
          "_value": "amount to burn."
        }
      },
      "burnFrom(address,uint256)": {
        "details": "See {ERC20Upgradeable}"
      },
      "decimals()": {
        "details": "See {ERC20Upgradeable}"
      },
      "disableExits()": {
        "details": "Disable exits."
      },
      "enableExits()": {
        "details": "Enable exits and thus users will be able to change their resi-tokens."
      },
      "exit(uint256)": {
        "details": "Change Resi tokens for stable value token.",
        "params": {
          "_serieId": "serie id."
        }
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive. Role bearers are not sorted in any particular way, and their ordering may change at any point. WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleGranted} event."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "initialize(uint8,address,address[])": {
        "details": "Initialize contract.",
        "params": {
          "_builders": "array of builder addresses.",
          "_decimals": "token decimals.",
          "_treasury": "treasury address."
        }
      },
      "isBuilder(address)": {
        "params": {
          "_builder": "address."
        }
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "pause()": {
        "details": "Pause contract."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "removeBuilder(address)": {
        "details": "Remove builder user.",
        "params": {
          "_builder": "builder address."
        }
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been revoked `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `callerConfirmation`. May emit a {RoleRevoked} event."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role. May emit a {RoleRevoked} event."
      },
      "setSerieVault(address,uint256)": {
        "details": "Set serie vault",
        "params": {
          "_serieId": "serie id.",
          "_vault": "vault address."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "It is not allowed to transfer resi token"
      },
      "transferFrom(address,address,uint256)": {
        "details": "It is not allowed to transfer resi token"
      },
      "unpause()": {
        "details": "Unpause contract."
      },
      "updateSerieVaultStatus(uint256,bool)": {
        "details": "enable or disable serie vault.",
        "params": {
          "_serieId": "serie id.",
          "_status": "new serie vault status."
        }
      },
      "version()": {
        "details": "Version for upgradeable version",
        "returns": {
          "_0": "version"
        }
      },
      "withdrawSerieVaultToken(uint256)": {
        "details": "Withdrawn stable token funds from vault dust back to the treasury."
      }
    },
    "stateVariables": {
      "BUILDER_ROLE": {
        "details": "BUILDER_ROLE"
      },
      "EXIT_STATE": {
        "details": "exit state: whether exits are enable or not"
      },
      "TREASURY": {
        "details": "treasury address"
      },
      "_DECIMALS": {
        "details": "token decimals."
      },
      "serieSupplies": {
        "details": "Serie supply minted"
      },
      "serieVaults": {
        "details": "Vault serie id"
      },
      "upgradeGap": {
        "details": "Leave a gap betweeen inherited contracts variables in orderto be able to add more variables in them later."
      },
      "userSerieBalance": {
        "details": "User balance per serie"
      }
    },
    "title": "Resi Token V1",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "isBuilder(address)": {
        "notice": "#dev Returns whether an address is a builder."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4794,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_rolesSet",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(Bytes32Set)4334_storage"
      },
      {
        "astId": 4797,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "_DECIMALS",
        "offset": 0,
        "slot": "2",
        "type": "t_uint8"
      },
      {
        "astId": 4800,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "TREASURY",
        "offset": 1,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 4803,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "EXIT_STATE",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 4808,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "serieSupplies",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 4815,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "userSerieBalance",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 4821,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "serieVaults",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(SerieVault)6149_storage)"
      },
      {
        "astId": 5771,
        "contract": "contracts/ResiToken.sol:ResiToken",
        "label": "upgradeGap",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_uint256)20_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)20_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[20]",
        "numberOfBytes": "640"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_uint256,t_struct(SerieVault)6149_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IResiToken.SerieVault)",
        "numberOfBytes": "32",
        "value": "t_struct(SerieVault)6149_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)4334_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 4333,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4140_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(SerieVault)6149_storage": {
        "encoding": "inplace",
        "label": "struct IResiToken.SerieVault",
        "members": [
          {
            "astId": 6146,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "vault",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 6148,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Set)4140_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 4135,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4139,
            "contract": "contracts/ResiToken.sol:ResiToken",
            "label": "_positions",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}